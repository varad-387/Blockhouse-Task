name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Insert your test command here; for example, if you have tests:
          pytest tests/ || echo "No tests defined"

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t my-trade-service:latest .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag and Push Docker Image
        run: |
          docker tag my-trade-service:latest ${{ secrets.DOCKERHUB_USERNAME }}/my-trade-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-trade-service:latest

      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Clone or pull latest code on EC2 if necessary
            if [ -d "Blockhouse-Task" ]; then
              cd Blockhouse-Task && git pull
            else
              git clone https://github.com/your-username/Blockhouse-Task.git
              cd Blockhouse-Task
            fi
            # Build the Docker image
            docker build -t my-trade-service:latest .
            # Stop and remove the old container if exists
            docker stop trade_service || true
            docker rm trade_service || true
            # Run the new container
            docker run -d -p 8000:8000 --name trade_service my-trade-service:latest
